{"version":3,"sources":["components/Target.tsx","components/ElemCount.tsx","components/getCombinations.ts","components/Solver.tsx","components/filterCombinations.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Target","props","className","type","min","max","value","targetValue","undefined","onChange","evt","intVal","parseInt","getIntVal","target","ElemCount","description","currentValue","minValue","maxValue","getCombinations","results","subsetSum","numbers","partial","s","reduce","a","b","console","log","join","push","i","length","n","remaining","slice","concat","Solver","state","minElems","maxElems","setTarget","newTarget","setState","setMinElems","Math","setMaxElems","getResults","allCombinations","filter","comb","filterCombinations","sort","this","map","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.10811ecf.chunk.js","sourcesContent":["import React from 'react';\r\n\r\ninterface TargetProps {\r\n    targetValue : number | null,\r\n    onChange : (newTarget:number| null) => void,\r\n}\r\n\r\nconst Target: React.FC<TargetProps> = (props) => {\r\n  return (\r\n    <div className=\"Target\">\r\n        <div>\r\n        <span>Target is </span><input type=\"number\" min={2} max={35} value={props.targetValue || undefined} onChange={(evt) => props.onChange(getIntVal(evt.target.value))}></input>\r\n        </div>\r\n{/*         <div>\r\n            <input type=\"range\" min={2} max={35} value={props.targetValue} onChange={(evt) => props.onChange(getIntVal(evt.target.value))}></input>\r\n        </div>\r\n */}    </div>\r\n  );\r\n}\r\n\r\nfunction getIntVal(value : string) : number | null {\r\n    var intVal = parseInt(value);\r\n\r\n    if (!intVal || intVal < 2 || intVal > 35) return null;\r\n\r\n    return intVal;\r\n}\r\n\r\nexport default Target;\r\n","import React from 'react';\r\n\r\ninterface ElemCountProps {\r\n    description : string,\r\n    minValue : number,\r\n    currentValue : number,\r\n    maxValue : number,\r\n    onChange : (newValue:number) => void,\r\n}\r\n\r\nconst ElemCount: React.FC<ElemCountProps> = (props) => {\r\n  return (\r\n    <div className=\"ElemCount\">\r\n        <div>\r\n            {`${props.description} ${props.currentValue}`}\r\n        </div>\r\n        <div>\r\n            <input type=\"range\" min={props.minValue} max={props.maxValue} value={props.currentValue} onChange={(evt) => props.onChange(parseInt(evt.target.value))}></input>\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ElemCount;\r\n","\r\nexport default function getCombinations(target: number) : Array<Array<number>> {\r\n    var results : Array<Array<number>> = [];\r\n    const options = [2,3,4,5,6,7,8];\r\n    subsetSum(options, target, [], results)\r\n    return results;\r\n}\r\n\r\nfunction subsetSum(numbers : Array<number>, target : number, partial : Array<number>, results : Array<Array<number>> ) {\r\n    // sum partial\r\n    let s = partial.reduce(function (a, b) {\r\n      return a + b;\r\n    }, 0);\r\n  \r\n    // check if the partial sum is equals to target\r\n    if (s === target) {\r\n      console.log(\"%s=%s\", partial.join(\"+\"), target)\r\n      results.push(partial);\r\n    }\r\n  \r\n    if (s >= target) {\r\n      return;  // if we reach the number why bother to continue\r\n    }\r\n  \r\n    for (var i = 0; i < numbers.length; i++) {\r\n      let n = numbers[i];\r\n      let remaining = numbers.slice(i + 1);\r\n      subsetSum(remaining, target, partial.concat([n]), results);\r\n    }\r\n}\r\n","import  React, { Component } from \"react\";\r\nimport Target from \"./Target\"\r\nimport ElemCount from './ElemCount'\r\nimport getCombinations from './getCombinations'\r\nimport filterCombinations from './filterCombinations'\r\n\r\n\r\ninterface SolverProps {\r\n}\r\n\r\ninterface SolverState {\r\n    target: number | null;\r\n    minElems : number;\r\n    maxElems : number;\r\n};\r\n\r\nexport default class Solver extends Component<SolverProps, SolverState> {\r\n\r\n    state: SolverState = {\r\n        target : 20,\r\n        minElems : 1,\r\n        maxElems : 7,\r\n    };\r\n\r\n    setTarget = (newTarget : number | null) => {\r\n        if (newTarget) {\r\n            this.setState({\r\n                target: newTarget,\r\n                minElems : 1,\r\n                maxElems : 7,\r\n            });\r\n        } else {\r\n            this.setState({\r\n                target : null,\r\n            });\r\n        }\r\n    }\r\n\r\n    setMinElems = (minElems : number) => {\r\n        this.setState({\r\n            minElems : minElems,\r\n            maxElems : Math.max(this.state.maxElems, minElems)\r\n        })\r\n    }\r\n\r\n    setMaxElems = (maxElems : number) => {\r\n        this.setState({\r\n            maxElems : maxElems,\r\n            minElems : Math.min(this.state.minElems, maxElems)\r\n        })\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <h1>Sandwich Sudoku Combination Solver</h1>\r\n                <Target targetValue={this.state.target} onChange={this.setTarget}/>\r\n                <ElemCount description=\"Minimum number of elements is\" minValue={1} maxValue={7} currentValue={this.state.minElems} onChange={(i) => this.setMinElems(i)} />\r\n                <ElemCount description=\"Maximum number of elements is\" minValue={1} maxValue={7} currentValue={this.state.maxElems} onChange={(i) => this.setMaxElems(i)} />\r\n                <div>\r\n                    { this.getResults().map( (comb) => <div>{comb.join(\" + \")}</div>) }\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    getResults = () : Array<Array<number>> => {\r\n        if (!this.state.target) return [];\r\n        let allCombinations = getCombinations(this.state.target);\r\n        let filteredCombinations =  filterCombinations(allCombinations, this.state.minElems, this.state.maxElems);\r\n        let sortedCombinations = filteredCombinations.sort( (a, b) => {\r\n            if (a.length < b.length) return -1; // shortest first\r\n            return a.join() < b.join() ? -1 : 1; // otherwise by order of elements\r\n        } );\r\n        return sortedCombinations;\r\n    }\r\n}","\r\nexport default function filterCombinations(allCombinations: Array<Array<number>>, \r\n    minElems:number, maxElems:number) : Array<Array<number>> {\r\n    return allCombinations.filter( (comb) => comb.length >= minElems && comb.length <= maxElems);\r\n}","import React from 'react';\nimport './App.css';\nimport Solver from './components/Solver'\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      </header>\n      <Solver />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}